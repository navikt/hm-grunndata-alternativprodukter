type Query {
    alternativeProducts(hmsnrs:[String!]!): [AlternativeProduct!]!
    productStock(hmsnr: String!): ProductStock!
    getHmsArtnrMappingsById(id: String!): HmsArtnrMapping
    getHmsArtnrMappingBySourceHmsArtnr(sourceHmsArtnr: String!): [HmsArtnrMapping!]!
}

type AlternativeProduct {
    id: String!
    hmsArtNr: String!
    title: String!
    seriesId: String!
    articleName: String!
    supplier: Supplier!
    isoCategory: String!
    alternativeFor: [String!]!
    media: [Media!]!
    hasAgreement: Boolean!
    agreements: [Agreement]
    wareHouseStock: [WareHouseStock]
}

type Media {
    uri: String!
    type: String!
    priority: Int
    text: String!
}

type WareHouseStock {
    locationId: Int
    location: String!
    available: Int
    reserved: Int
    needNotified: Int
    minmax: Boolean!
    updated: String!
}

type Supplier {
    id: String!
    name: String!
}

type Agreement {
    id: String!
    title: String!
    label: String
    rank: Int!
    postNr: Int
    postTitle: String!
    postId: String!
    refNr: String!
    published: String
    expired: String
}

type ProductStock {
    id: String!
    hmsArtNr: String!
    status: String!
    warehouseStock: [WareHouseStock!]!
    updated: String!
}

input HmsArtnrMappingInput {
    sourceHmsArtnr: String!
    targetHmsArtnr: String!
}

type HmsArtnrMapping {
    id: String!
    sourceHmsArtnr: String!
    targetHmsArtnr: String!
    created: String!
}

type Mutation {
    createHmsArtnrMapping(input: HmsArtnrMappingInput!): HmsArtnrMapping!
    updateHmsArtnrMapping(id: String!, input: HmsArtnrMappingInput!): HmsArtnrMapping!
    deleteHmsArtnrMapping(id: String!): Boolean!
}